yarn add node-sass

webpack and babel will convert sass to css

yarn add react-router-dom

if there are conflicts in version for dependencies
package.json
"resolutions": {
  "babel-jest": "24.7.1"
}

import BrowserRouter in index.js and wrap around <App />

Route
- exact: true or false for exact match
- path: pattern url looking to match
- component

Switch
  Route
  - the moment it sees something match, it will not render the other Routes

props
- history
-- equivalent to use a link but more dynamic
-- can use in componentDidMount
- location: where we are currently, full url
- match

<Link to='/path
- using js to which component to remount/re-render

<button onClick={() => props.history.push('/path)}

match
- allows us to build out nested structure
- it will match the pattern and doesn't care how deeply nested the route is to generate a dynamic path

Route history is only passed into it's first child
- dont prop tunneling
-- passing history down the children til it reaches the child that needs it
-- bad practice cuz there are children that don't need it

withRouter
- higher order component
- function takes a component and transform it into another higherform of itself

export default withRouter(MenuItem)

<div className='directory-menu'>
  { this.state.sections.map(({ title, imageUrl, id, size }) => (
    <MenuItem key={id} title={title} imageUrl={imageUrl} size={size} />
  ))}
</div>
- since the destructured attributes are mapped out the same, we can just use spread
<div className='directory-menu'>
  { this.state.sections.map(({ id, ...otherSectionProps }) => (
    <MenuItem key={id} {...otherSectionProps} />
  ))}
</div>

importing svg
import { ReactComponent as Logo }
- tells create react app that you want a react component that renders SVG rather than its filename

firebase
develop
- create a project
- project overview > web icon
-- register app
-- copy firebaseConfig

yarn add firebase
add firebase.util.js
- configures firebase auth

firebase > authentication > sign-in method > edit google
- enable
- project support email
- save

firestore
- firebase > database > create database
- nosql db
-- giant json
- collection
-- array of things
-- i.e. user collection, cartItems collection

query
const firestore = firebase.firestore();
firestore.collection('users').doc('<userId>').collections('cartItems')
firestore.doc('/users/<userId>/cartItems/...)
- equivalent to the query above to get the document (item)
firestore.collection('/users/<userId>/cartItems')
- to get the collection

firestore
- returns 2 types of objects
- references
-- object that represents the current place in db
-- firestore.doc('/users/:userId)
-- firestore.collection('/users)
- snapshots

documentSnapshot
- .exists
-- check if document exists
- .data()
-- get actual properties json
-- snapshot alone doesn't give any data
-- snapshot.data() will return attributes

firebase
- enable email and password


************************
8. REDUX
************************
REDUX
- good for managing large state
- useful for sharing data btw components
- predictable state management using the 3 principles
1. single source of truth
2. state is read only
3. changes using pure functions

Redux Flow
action (middleware) > root reducer > store (state) > dom change

render a new object so that the component rerender

reducer is just a function that takes (currentState, action)

yarn add redux redux-logger react-redux

pass store into Provider
- app can now access redux

Redux setup
- yarn add redux redux-logger react-redux
- add Provider to index.js
- create redux folder
- root-reducer.js
-- combine all the reducers
- user/
-- user.reducer
** listening on action.type SET_CURRENT_USER and return new state
-- user.actions
** method that returns user base on setuCurrentUser
- store
-- has middleware to accept all the actions before pushing to root-reducer
-- pass into Provider

connect 
- higher order component
-- takes a component and return a new supped up component
- lets us modify component to access things related to redux

connect()(Header)
- connect header component
- remove currentUser state passed into header from App.js

const mapStateToProps = state =>
connect(mapStateToProps)(Component)
- use this pattern in component anywhere that needs to access state

convert App to using connect
- no longer need state and constructor
- remove setState and just use setuCurrentUser

render in jsx
- adds js
- use in redirect

cart dropdown
- create cart-dropdown component
- make it hide and show base on the state
-- create cart.reducer
** cart reducer handles changing the state from the initial state
-- create cart.action
** a function that returns the type TOGGLE_CART_HIDDEN
-- add connect to cart-icon
** mapDispatchToProps - dispatch type from cart.action which returns type TOGGLE_CART_HIDDEN
-- add cart.reducer to root-reducer
-- cart.reducer will listen to the dispatch

addItem to cart
- add cartItem to state in cart.reducer
- add ADD_ITEM to cart.type
- add new action addItem to cart.action that represents what we are gonna do with the cartItems array
-- define addItem which is a function that gets the item and generates a new action with type ADD_ITEM and passes in the payload
- add CartActionTypes.ADD_ITEM case in cart.reducer so that it can listen to it
-- return new state of overall cart.reducer with cartItems as a new array that spreads in the cartItems and append action.payload to the end
- update collections-item so that it pulls in new props
-- the new props has addItem, which is a method that dispatches addItem with the item
-- addItem with the item is reference back to addItem in cart.action
- now the custom button has access to this addItem props with onClick

memoization
- caching of selector value
- example of cartItems.reduce always rendering and causing a performance issue
reselect
- if the state is the same, don't pass into the component
- allows to memoize and not re-render a component if the state value does not change

yarn add reselect
create cart.selector.js
- add selectors to return memoized items
- memoized items doesn't rerender if the state items not related to them update

inputSelector
- doesn't use reselect
outputSelector
- uses reselect

createSelector
- return an item that is memoize

createStructuredSelector
- comes from reselect
- for multiple selectors, createStructuredSelector will pass the state to each selector

const mapStateToProps = state => ({
  currentUser: selectCurrentUser(state),
  hidden: selectCartHidden(state)
});

const mapStateToProps = createStructuredSelector({
  currentUser: selectCurrentUser,
  hidden: selectCartHidden
});

JS evaluate to false
0
false
undefined
null (object)
NaN (number)
"" (string)

withRouter
- wrap withRouter to HOC
- gives access to history
withRouter(connect(mapStateToProps)(CartDropDown));
- withRouter is taking the component that got returned from connect as an arg
- order matters as it evaluates from inside out
- pass match, history and location into component

checkoutPage
- cart.selector - selectCArtTotal
- connect from react-redux
- createStructure from reselect
- import selectCartTotal, selectCartItems

extensible code
- reusable code
- structure the project in a way that easy to see
- simple code that anyone can read

connect
- pass dispatch into props if we don't pass in mapDispatchToProps

clear items from cart
- cart.types
-- declare CLEAR_CART_ITEM type
- cart.action
-- create a clearItem action
- cart.reducer 
-- catch the action in reducer


************************
9. SESSION STORAGE & PERSISTENCE
************************
sessionStorage
- stores til the tab is closed
localStorage
- stores til it is cleared

REdux Persist
yarn add redux-persist

store
- a combination of rootreducer and middleware
- add persistStore

root.reducer
- import storage from 'redux-persist/lib/storage';
-- localStorage
- persistReducer(persistConfig, rootReducer)
-- modifies rootReducer with persistence capabilities

index.js
- wrap <App/> in <PersistGate></PersistGate>


************************
10. REDUX 2
************************
- move section data from directory component into Redux
- directory.reducer
-- initial_state
-- switch case that returns default state
- root.reducer
-- add directory to root.reducer
- directory component
-- change from class to function expression cuz it doesn't have state
-- connect to get states
- directory selector
-- redux / reselect
-- directorySelector function expression that returns directory from state
-- sectionSelector that uses createSelector to return sections off of directory
- directory component
-- import sectionsSelector
-- mapStateToProps that returns sections off of sectionsSelector(state)
-- pass mapStateToProps into connect
-- Directory component has access to sections


************************
11. Advance Routing
************************
<Route path='/shop' component={ShopPage} />
Route
- gives ShopPage access to match, location, history in props

:collectionId
match.params.collectionId

mapStateToProps = (state, ownProps)
- mapStateToProps has 2 args
- ownProps is the props of the component
- ownProps.match.params.collectionId

const mapStateToProps = (state, ownProps) => ({
  collection: selectCollection(ownProps.match.params.collectionId)(state)
});
- js curry
- bind collectionId to the function and then invoke with state

data normalization
- storing lists elements inside an object instead of array
- faster search

data Flow
- how much of that data do I want (selectors)


************************
13. STRIPE PAYMENTS
************************
yarn add react-stripe-checkout


************************
14. DEPLOY TO PROD
************************
heroku create djm-swag --buildpack https://github.com/mars/create-react-app-buildpack.git
- buildpack deploys react as a static project
- create a new project with heroku cli

git push heroku master
- push build to heroku

optimize production
store.js
- logger middleware

const middlewares = [];
if (process.env.NODE_ENV === 'development') {
  middlewares.push(logger);
}


************************
15. CSS IN JS
************************
styled-components

yarn add styled-components
- use js to set the styles

import styled, { css } from 'styled-components';
import { Link } from 'react-router-dom';

const OptionCss = css`
  padding: 10px 15px;
  cursor: pointer;
`;
- CSS block that can be resused
export const OptionLink = styled(Link)`
  ${OptionCss}
`;
- pass link into styled
<Link to='/contact' /> becomes <OptionLink to='/contact'>CONTACT</OptionLink>

export const HeaderContainer = styled.div`
  height: 70px;
  width: 100%;
  display: flex;
  justify-content: space-between;
  margin-bottom: 25px;
`;
- styling using js

<OptionLink as='div' />
- makes this link as a div

styled
- takes in nesting like scss

come back and finish converting the other components to styled-components
https://github.com/zhangmyihua/lesson-26-complete


************************
16. Advanced Redux + Firebase
************************
Refresher
Firestore returns
- references
- snapshots
-- collection snapshot is called a query snapshot
- these objects can be Document or Collection
- firestore will always return these objects even if nothing exists from the query

queryReference
- current place in db we are querying
- get them by calling: 
firestore.doc('/users/:userId')
firestore.collections('/users')

documentRef
- CRUD methods
- .set(), .get(), .update(), .delete()

collectionSnapshot
- docs
-- queryDocSnapshots
- empty
-- is docs empty
- size
-- docs length
- collection: collectionSnapshot.docs.map(doc => doc.data())
-- this gives data of the documents

const collectionRef = firestore.collection('collections');
collectionRef.doc()
- firestore will create a document with a unique key
- if we pass an arg into doc(id)
-- it will create a key with the arg

firestore.batch()
- promise all
- stop process if one of the batch item fails

addCollectionAndDocuments('collections', collectionsArray.map(({ title, items }) => ({ title, items })));
- destructure to get only title and items to put into db

